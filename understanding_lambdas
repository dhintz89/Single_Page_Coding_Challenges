### Using lambdas in iterators

# create a lambda
half = ->(numerator) {
    if numerator % 2 === 0
        return numerator / 2
    end
    return "#{numerator} can't be halved evenly"
}

# create some arrays for iteration
numarry = [0, 1, 2, 3, 4]
textarry = ["a", "b", "c"]

# call lambda in iterator
puts numarry.map(&half)
  # => [0, "1 can't be halved evenly", 1, "3 can't be halved evenly", 2]

# call built-in Ruby function in iterator
puts textarry.map(&:upcase)
  # => ["A", "B", "C"]

# define method on global Object
def double(num)
  num * 2
end

# what object owns #double vs #half
puts method(:double).owner
  # => Object
puts half.class
  # => Proc

# what is the ancestry of each owner object
puts Object.ancestors
  # => [Object, Kernel, BasicObject]
  
puts Proc.ancestors
  # => [Proc, Object, Kernel, BasicObject]


# modify Integer class to include double method
class Integer
  def double
    self * 2
  end
end

puts numarry.map(&:double)
  # => [0, 2, 4, 6, 8]



### Using lambdas for currying functions

# Create lambda function
divide_by = ->(divisor, numerator) { 
    if numerator % divisor === 0
        numerator / divisor
    end
    return "#{numerator} is not divisible by #{divisor}!"
}

# curry the lambda by calling with one argument and assigning result to a new variable
divide_by_5 = divide_by.curry.call(5)
  # => 
div_by_8 = divide_by.curry.call(8)
  # => 
divide_number_by_100 = divide_by.curry.call(100)
  # => 

divide_by_5.call(15)
  # => 3

divide_by_5.call(8)
  # => "8 is not divisible by 5!"

divide_number_by_100.call(500)
  # => 5
